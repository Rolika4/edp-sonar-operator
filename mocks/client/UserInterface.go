// Code generated by mockery v2.16.0. DO NOT EDIT.

package client

import (
	context "context"

	sonar "github.com/epam/edp-sonar-operator/pkg/client/sonar"
	mock "github.com/stretchr/testify/mock"
)

// UserInterface is an autogenerated mock type for the UserInterface type
type UserInterface struct {
	mock.Mock
}

// AddPermissionToUser provides a mock function with given fields: user, permissions
func (_m *UserInterface) AddPermissionToUser(user string, permissions string) error {
	ret := _m.Called(user, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(user, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserToGroup provides a mock function with given fields: groupName, user
func (_m *UserInterface) AddUserToGroup(groupName string, user string) error {
	ret := _m.Called(groupName, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(groupName, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: ctx, user, oldPassword, newPassword
func (_m *UserInterface) ChangePassword(ctx context.Context, user string, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, user, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, user, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, u
func (_m *UserInterface) CreateUser(ctx context.Context, u *sonar.User) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateUserToken provides a mock function with given fields: userName
func (_m *UserInterface) GenerateUserToken(userName string) (*string, error) {
	ret := _m.Called(userName)

	var r0 *string
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userName
func (_m *UserInterface) GetUser(ctx context.Context, userName string) (*sonar.User, error) {
	ret := _m.Called(ctx, userName)

	var r0 *sonar.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.User); ok {
		r0 = rf(ctx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserToken provides a mock function with given fields: ctx, userLogin, tokenName
func (_m *UserInterface) GetUserToken(ctx context.Context, userLogin string, tokenName string) (*sonar.UserToken, error) {
	ret := _m.Called(ctx, userLogin, tokenName)

	var r0 *sonar.UserToken
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *sonar.UserToken); ok {
		r0 = rf(ctx, userLogin, tokenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.UserToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userLogin, tokenName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserInterface creates a new instance of UserInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserInterface(t mockConstructorTestingTNewUserInterface) *UserInterface {
	mock := &UserInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
