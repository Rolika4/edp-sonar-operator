// Code generated by mockery v2.16.0. DO NOT EDIT.

package client

import (
	context "context"

	sonar "github.com/epam/edp-sonar-operator/pkg/client/sonar"
	mock "github.com/stretchr/testify/mock"
)

// PermissionTemplateInterface is an autogenerated mock type for the PermissionTemplateInterface type
type PermissionTemplateInterface struct {
	mock.Mock
}

// AddGroupToPermissionTemplate provides a mock function with given fields: ctx, templateID, permGroup
func (_m *PermissionTemplateInterface) AddGroupToPermissionTemplate(ctx context.Context, templateID string, permGroup *sonar.PermissionTemplateGroup) error {
	ret := _m.Called(ctx, templateID, permGroup)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *sonar.PermissionTemplateGroup) error); ok {
		r0 = rf(ctx, templateID, permGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePermissionTemplate provides a mock function with given fields: ctx, tpl
func (_m *PermissionTemplateInterface) CreatePermissionTemplate(ctx context.Context, tpl *sonar.PermissionTemplateData) (string, error) {
	ret := _m.Called(ctx, tpl)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.PermissionTemplateData) string); ok {
		r0 = rf(ctx, tpl)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sonar.PermissionTemplateData) error); ok {
		r1 = rf(ctx, tpl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissionTemplate provides a mock function with given fields: ctx, id
func (_m *PermissionTemplateInterface) DeletePermissionTemplate(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPermissionTemplate provides a mock function with given fields: ctx, name
func (_m *PermissionTemplateInterface) GetPermissionTemplate(ctx context.Context, name string) (*sonar.PermissionTemplate, error) {
	ret := _m.Called(ctx, name)

	var r0 *sonar.PermissionTemplate
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.PermissionTemplate); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.PermissionTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionTemplateGroups provides a mock function with given fields: ctx, templateID
func (_m *PermissionTemplateInterface) GetPermissionTemplateGroups(ctx context.Context, templateID string) ([]sonar.PermissionTemplateGroup, error) {
	ret := _m.Called(ctx, templateID)

	var r0 []sonar.PermissionTemplateGroup
	if rf, ok := ret.Get(0).(func(context.Context, string) []sonar.PermissionTemplateGroup); ok {
		r0 = rf(ctx, templateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sonar.PermissionTemplateGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveGroupFromPermissionTemplate provides a mock function with given fields: ctx, templateID, permGroup
func (_m *PermissionTemplateInterface) RemoveGroupFromPermissionTemplate(ctx context.Context, templateID string, permGroup *sonar.PermissionTemplateGroup) error {
	ret := _m.Called(ctx, templateID, permGroup)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *sonar.PermissionTemplateGroup) error); ok {
		r0 = rf(ctx, templateID, permGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchPermissionTemplates provides a mock function with given fields: ctx, name
func (_m *PermissionTemplateInterface) SearchPermissionTemplates(ctx context.Context, name string) ([]sonar.PermissionTemplate, error) {
	ret := _m.Called(ctx, name)

	var r0 []sonar.PermissionTemplate
	if rf, ok := ret.Get(0).(func(context.Context, string) []sonar.PermissionTemplate); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sonar.PermissionTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDefaultPermissionTemplate provides a mock function with given fields: ctx, name
func (_m *PermissionTemplateInterface) SetDefaultPermissionTemplate(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePermissionTemplate provides a mock function with given fields: ctx, tpl
func (_m *PermissionTemplateInterface) UpdatePermissionTemplate(ctx context.Context, tpl *sonar.PermissionTemplate) error {
	ret := _m.Called(ctx, tpl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.PermissionTemplate) error); ok {
		r0 = rf(ctx, tpl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPermissionTemplateInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPermissionTemplateInterface creates a new instance of PermissionTemplateInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPermissionTemplateInterface(t mockConstructorTestingTNewPermissionTemplateInterface) *PermissionTemplateInterface {
	mock := &PermissionTemplateInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
