// Code generated by mockery v2.16.0. DO NOT EDIT.

package client

import (
	context "context"

	sonar "github.com/epam/edp-sonar-operator/pkg/client/sonar"
	mock "github.com/stretchr/testify/mock"
)

// GroupInterface is an autogenerated mock type for the GroupInterface type
type GroupInterface struct {
	mock.Mock
}

// AddPermissionsToGroup provides a mock function with given fields: groupName, permissions
func (_m *GroupInterface) AddPermissionsToGroup(groupName string, permissions string) error {
	ret := _m.Called(groupName, permissions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(groupName, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGroup provides a mock function with given fields: ctx, gr
func (_m *GroupInterface) CreateGroup(ctx context.Context, gr *sonar.Group) error {
	ret := _m.Called(ctx, gr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.Group) error); ok {
		r0 = rf(ctx, gr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroup provides a mock function with given fields: ctx, groupName
func (_m *GroupInterface) DeleteGroup(ctx context.Context, groupName string) error {
	ret := _m.Called(ctx, groupName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroup provides a mock function with given fields: ctx, groupName
func (_m *GroupInterface) GetGroup(ctx context.Context, groupName string) (*sonar.Group, error) {
	ret := _m.Called(ctx, groupName)

	var r0 *sonar.Group
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.Group); ok {
		r0 = rf(ctx, groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, currentName, group
func (_m *GroupInterface) UpdateGroup(ctx context.Context, currentName string, group *sonar.Group) error {
	ret := _m.Called(ctx, currentName, group)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *sonar.Group) error); ok {
		r0 = rf(ctx, currentName, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGroupInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewGroupInterface creates a new instance of GroupInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGroupInterface(t mockConstructorTestingTNewGroupInterface) *GroupInterface {
	mock := &GroupInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
